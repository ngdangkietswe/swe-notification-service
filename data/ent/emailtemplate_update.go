// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/emailtemplate"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/predicate"
)

// EmailTemplateUpdate is the builder for updating EmailTemplate entities.
type EmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etu *EmailTemplateUpdate) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// SetTemplateKey sets the "template_key" field.
func (etu *EmailTemplateUpdate) SetTemplateKey(s string) *EmailTemplateUpdate {
	etu.mutation.SetTemplateKey(s)
	return etu
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableTemplateKey(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetTemplateKey(*s)
	}
	return etu
}

// SetName sets the "name" field.
func (etu *EmailTemplateUpdate) SetName(s string) *EmailTemplateUpdate {
	etu.mutation.SetName(s)
	return etu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableName(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetName(*s)
	}
	return etu
}

// SetSubject sets the "subject" field.
func (etu *EmailTemplateUpdate) SetSubject(s string) *EmailTemplateUpdate {
	etu.mutation.SetSubject(s)
	return etu
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableSubject(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetSubject(*s)
	}
	return etu
}

// SetBody sets the "body" field.
func (etu *EmailTemplateUpdate) SetBody(s string) *EmailTemplateUpdate {
	etu.mutation.SetBody(s)
	return etu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableBody(s *string) *EmailTemplateUpdate {
	if s != nil {
		etu.SetBody(*s)
	}
	return etu
}

// SetIsHTML sets the "is_html" field.
func (etu *EmailTemplateUpdate) SetIsHTML(b bool) *EmailTemplateUpdate {
	etu.mutation.SetIsHTML(b)
	return etu
}

// SetNillableIsHTML sets the "is_html" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableIsHTML(b *bool) *EmailTemplateUpdate {
	if b != nil {
		etu.SetIsHTML(*b)
	}
	return etu
}

// SetUpdatedAt sets the "updated_at" field.
func (etu *EmailTemplateUpdate) SetUpdatedAt(t time.Time) *EmailTemplateUpdate {
	etu.mutation.SetUpdatedAt(t)
	return etu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableUpdatedAt(t *time.Time) *EmailTemplateUpdate {
	if t != nil {
		etu.SetUpdatedAt(*t)
	}
	return etu
}

// SetIsDeleted sets the "is_deleted" field.
func (etu *EmailTemplateUpdate) SetIsDeleted(b bool) *EmailTemplateUpdate {
	etu.mutation.SetIsDeleted(b)
	return etu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (etu *EmailTemplateUpdate) SetNillableIsDeleted(b *bool) *EmailTemplateUpdate {
	if b != nil {
		etu.SetIsDeleted(*b)
	}
	return etu
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etu *EmailTemplateUpdate) Mutation() *EmailTemplateMutation {
	return etu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, etu.sqlSave, etu.mutation, etu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etu *EmailTemplateUpdate) check() error {
	if v, ok := etu.mutation.TemplateKey(); ok {
		if err := emailtemplate.TemplateKeyValidator(v); err != nil {
			return &ValidationError{Name: "template_key", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.template_key": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etu.mutation.Body(); ok {
		if err := emailtemplate.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.body": %w`, err)}
		}
	}
	return nil
}

func (etu *EmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := etu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeUUID))
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etu.mutation.TemplateKey(); ok {
		_spec.SetField(emailtemplate.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := etu.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etu.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etu.mutation.Body(); ok {
		_spec.SetField(emailtemplate.FieldBody, field.TypeString, value)
	}
	if value, ok := etu.mutation.IsHTML(); ok {
		_spec.SetField(emailtemplate.FieldIsHTML, field.TypeBool, value)
	}
	if value, ok := etu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := etu.mutation.IsDeleted(); ok {
		_spec.SetField(emailtemplate.FieldIsDeleted, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	etu.mutation.done = true
	return n, nil
}

// EmailTemplateUpdateOne is the builder for updating a single EmailTemplate entity.
type EmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// SetTemplateKey sets the "template_key" field.
func (etuo *EmailTemplateUpdateOne) SetTemplateKey(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetTemplateKey(s)
	return etuo
}

// SetNillableTemplateKey sets the "template_key" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableTemplateKey(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetTemplateKey(*s)
	}
	return etuo
}

// SetName sets the "name" field.
func (etuo *EmailTemplateUpdateOne) SetName(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetName(s)
	return etuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableName(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetName(*s)
	}
	return etuo
}

// SetSubject sets the "subject" field.
func (etuo *EmailTemplateUpdateOne) SetSubject(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetSubject(s)
	return etuo
}

// SetNillableSubject sets the "subject" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableSubject(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetSubject(*s)
	}
	return etuo
}

// SetBody sets the "body" field.
func (etuo *EmailTemplateUpdateOne) SetBody(s string) *EmailTemplateUpdateOne {
	etuo.mutation.SetBody(s)
	return etuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableBody(s *string) *EmailTemplateUpdateOne {
	if s != nil {
		etuo.SetBody(*s)
	}
	return etuo
}

// SetIsHTML sets the "is_html" field.
func (etuo *EmailTemplateUpdateOne) SetIsHTML(b bool) *EmailTemplateUpdateOne {
	etuo.mutation.SetIsHTML(b)
	return etuo
}

// SetNillableIsHTML sets the "is_html" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableIsHTML(b *bool) *EmailTemplateUpdateOne {
	if b != nil {
		etuo.SetIsHTML(*b)
	}
	return etuo
}

// SetUpdatedAt sets the "updated_at" field.
func (etuo *EmailTemplateUpdateOne) SetUpdatedAt(t time.Time) *EmailTemplateUpdateOne {
	etuo.mutation.SetUpdatedAt(t)
	return etuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableUpdatedAt(t *time.Time) *EmailTemplateUpdateOne {
	if t != nil {
		etuo.SetUpdatedAt(*t)
	}
	return etuo
}

// SetIsDeleted sets the "is_deleted" field.
func (etuo *EmailTemplateUpdateOne) SetIsDeleted(b bool) *EmailTemplateUpdateOne {
	etuo.mutation.SetIsDeleted(b)
	return etuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (etuo *EmailTemplateUpdateOne) SetNillableIsDeleted(b *bool) *EmailTemplateUpdateOne {
	if b != nil {
		etuo.SetIsDeleted(*b)
	}
	return etuo
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etuo *EmailTemplateUpdateOne) Mutation() *EmailTemplateMutation {
	return etuo.mutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etuo *EmailTemplateUpdateOne) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdateOne {
	etuo.mutation.Where(ps...)
	return etuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EmailTemplateUpdateOne) Select(field string, fields ...string) *EmailTemplateUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EmailTemplate entity.
func (etuo *EmailTemplateUpdateOne) Save(ctx context.Context) (*EmailTemplate, error) {
	return withHooks(ctx, etuo.sqlSave, etuo.mutation, etuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) SaveX(ctx context.Context) *EmailTemplate {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (etuo *EmailTemplateUpdateOne) check() error {
	if v, ok := etuo.mutation.TemplateKey(); ok {
		if err := emailtemplate.TemplateKeyValidator(v); err != nil {
			return &ValidationError{Name: "template_key", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.template_key": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Name(); ok {
		if err := emailtemplate.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.name": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Subject(); ok {
		if err := emailtemplate.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.subject": %w`, err)}
		}
	}
	if v, ok := etuo.mutation.Body(); ok {
		if err := emailtemplate.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "EmailTemplate.body": %w`, err)}
		}
	}
	return nil
}

func (etuo *EmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *EmailTemplate, err error) {
	if err := etuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailtemplate.Table, emailtemplate.Columns, sqlgraph.NewFieldSpec(emailtemplate.FieldID, field.TypeUUID))
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for _, f := range fields {
			if !emailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := etuo.mutation.TemplateKey(); ok {
		_spec.SetField(emailtemplate.FieldTemplateKey, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Name(); ok {
		_spec.SetField(emailtemplate.FieldName, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Subject(); ok {
		_spec.SetField(emailtemplate.FieldSubject, field.TypeString, value)
	}
	if value, ok := etuo.mutation.Body(); ok {
		_spec.SetField(emailtemplate.FieldBody, field.TypeString, value)
	}
	if value, ok := etuo.mutation.IsHTML(); ok {
		_spec.SetField(emailtemplate.FieldIsHTML, field.TypeBool, value)
	}
	if value, ok := etuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailtemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := etuo.mutation.IsDeleted(); ok {
		_spec.SetField(emailtemplate.FieldIsDeleted, field.TypeBool, value)
	}
	_node = &EmailTemplate{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	etuo.mutation.done = true
	return _node, nil
}
