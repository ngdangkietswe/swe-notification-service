// Code generated by ent, DO NOT EDIT.

package emailtemplate

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the emailtemplate type in the database.
	Label = "email_template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTemplateKey holds the string denoting the template_key field in the database.
	FieldTemplateKey = "template_key"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldIsHTML holds the string denoting the is_html field in the database.
	FieldIsHTML = "is_html"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// Table holds the table name of the emailtemplate in the database.
	Table = "email_template"
)

// Columns holds all SQL columns for emailtemplate fields.
var Columns = []string{
	FieldID,
	FieldTemplateKey,
	FieldName,
	FieldSubject,
	FieldBody,
	FieldIsHTML,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsDeleted,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TemplateKeyValidator is a validator for the "template_key" field. It is called by the builders before save.
	TemplateKeyValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	SubjectValidator func(string) error
	// BodyValidator is a validator for the "body" field. It is called by the builders before save.
	BodyValidator func(string) error
	// DefaultIsHTML holds the default value on creation for the "is_html" field.
	DefaultIsHTML bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt time.Time
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
)

// OrderOption defines the ordering options for the EmailTemplate queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTemplateKey orders the results by the template_key field.
func ByTemplateKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateKey, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByBody orders the results by the body field.
func ByBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBody, opts...).ToFunc()
}

// ByIsHTML orders the results by the is_html field.
func ByIsHTML(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsHTML, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}
