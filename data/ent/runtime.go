// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/ngdangkietswe/swe-notification-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/emailtemplate"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	cdcauthusersFields := schema.CdcAuthUsers{}.Fields()
	_ = cdcauthusersFields
	// cdcauthusersDescUsername is the schema descriptor for username field.
	cdcauthusersDescUsername := cdcauthusersFields[1].Descriptor()
	// cdcauthusers.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	cdcauthusers.UsernameValidator = func() func(string) error {
		validators := cdcauthusersDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// cdcauthusersDescEmail is the schema descriptor for email field.
	cdcauthusersDescEmail := cdcauthusersFields[2].Descriptor()
	// cdcauthusers.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	cdcauthusers.EmailValidator = func() func(string) error {
		validators := cdcauthusersDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	emailtemplateFields := schema.EmailTemplate{}.Fields()
	_ = emailtemplateFields
	// emailtemplateDescTemplateKey is the schema descriptor for template_key field.
	emailtemplateDescTemplateKey := emailtemplateFields[1].Descriptor()
	// emailtemplate.TemplateKeyValidator is a validator for the "template_key" field. It is called by the builders before save.
	emailtemplate.TemplateKeyValidator = func() func(string) error {
		validators := emailtemplateDescTemplateKey.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(template_key string) error {
			for _, fn := range fns {
				if err := fn(template_key); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emailtemplateDescName is the schema descriptor for name field.
	emailtemplateDescName := emailtemplateFields[2].Descriptor()
	// emailtemplate.NameValidator is a validator for the "name" field. It is called by the builders before save.
	emailtemplate.NameValidator = func() func(string) error {
		validators := emailtemplateDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emailtemplateDescSubject is the schema descriptor for subject field.
	emailtemplateDescSubject := emailtemplateFields[3].Descriptor()
	// emailtemplate.SubjectValidator is a validator for the "subject" field. It is called by the builders before save.
	emailtemplate.SubjectValidator = func() func(string) error {
		validators := emailtemplateDescSubject.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(subject string) error {
			for _, fn := range fns {
				if err := fn(subject); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emailtemplateDescBody is the schema descriptor for body field.
	emailtemplateDescBody := emailtemplateFields[4].Descriptor()
	// emailtemplate.BodyValidator is a validator for the "body" field. It is called by the builders before save.
	emailtemplate.BodyValidator = emailtemplateDescBody.Validators[0].(func(string) error)
	// emailtemplateDescIsHTML is the schema descriptor for is_html field.
	emailtemplateDescIsHTML := emailtemplateFields[5].Descriptor()
	// emailtemplate.DefaultIsHTML holds the default value on creation for the is_html field.
	emailtemplate.DefaultIsHTML = emailtemplateDescIsHTML.Default.(bool)
	// emailtemplateDescCreatedAt is the schema descriptor for created_at field.
	emailtemplateDescCreatedAt := emailtemplateFields[6].Descriptor()
	// emailtemplate.DefaultCreatedAt holds the default value on creation for the created_at field.
	emailtemplate.DefaultCreatedAt = emailtemplateDescCreatedAt.Default.(time.Time)
	// emailtemplateDescUpdatedAt is the schema descriptor for updated_at field.
	emailtemplateDescUpdatedAt := emailtemplateFields[7].Descriptor()
	// emailtemplate.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	emailtemplate.DefaultUpdatedAt = emailtemplateDescUpdatedAt.Default.(time.Time)
	// emailtemplateDescIsDeleted is the schema descriptor for is_deleted field.
	emailtemplateDescIsDeleted := emailtemplateFields[8].Descriptor()
	// emailtemplate.DefaultIsDeleted holds the default value on creation for the is_deleted field.
	emailtemplate.DefaultIsDeleted = emailtemplateDescIsDeleted.Default.(bool)
}
