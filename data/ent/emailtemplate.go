// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/emailtemplate"
)

// EmailTemplate is the model entity for the EmailTemplate schema.
type EmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TemplateKey holds the value of the "template_key" field.
	TemplateKey string `json:"template_key,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// IsHTML holds the value of the "is_html" field.
	IsHTML bool `json:"is_html,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted    bool `json:"is_deleted,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldIsHTML, emailtemplate.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case emailtemplate.FieldTemplateKey, emailtemplate.FieldName, emailtemplate.FieldSubject, emailtemplate.FieldBody:
			values[i] = new(sql.NullString)
		case emailtemplate.FieldCreatedAt, emailtemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case emailtemplate.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailTemplate fields.
func (et *EmailTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailtemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				et.ID = *value
			}
		case emailtemplate.FieldTemplateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_key", values[i])
			} else if value.Valid {
				et.TemplateKey = value.String
			}
		case emailtemplate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				et.Name = value.String
			}
		case emailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				et.Subject = value.String
			}
		case emailtemplate.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				et.Body = value.String
			}
		case emailtemplate.FieldIsHTML:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_html", values[i])
			} else if value.Valid {
				et.IsHTML = value.Bool
			}
		case emailtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				et.CreatedAt = value.Time
			}
		case emailtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				et.UpdatedAt = value.Time
			}
		case emailtemplate.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				et.IsDeleted = value.Bool
			}
		default:
			et.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailTemplate.
// This includes values selected through modifiers, order, etc.
func (et *EmailTemplate) Value(name string) (ent.Value, error) {
	return et.selectValues.Get(name)
}

// Update returns a builder for updating this EmailTemplate.
// Note that you need to call EmailTemplate.Unwrap() before calling this method if this EmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (et *EmailTemplate) Update() *EmailTemplateUpdateOne {
	return NewEmailTemplateClient(et.config).UpdateOne(et)
}

// Unwrap unwraps the EmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (et *EmailTemplate) Unwrap() *EmailTemplate {
	_tx, ok := et.config.driver.(*txDriver)
	if !ok {
		panic("ent: EmailTemplate is not a transactional entity")
	}
	et.config.driver = _tx.drv
	return et
}

// String implements the fmt.Stringer.
func (et *EmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("EmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", et.ID))
	builder.WriteString("template_key=")
	builder.WriteString(et.TemplateKey)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(et.Name)
	builder.WriteString(", ")
	builder.WriteString("subject=")
	builder.WriteString(et.Subject)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(et.Body)
	builder.WriteString(", ")
	builder.WriteString("is_html=")
	builder.WriteString(fmt.Sprintf("%v", et.IsHTML))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(et.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(et.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", et.IsDeleted))
	builder.WriteByte(')')
	return builder.String()
}

// EmailTemplates is a parsable slice of EmailTemplate.
type EmailTemplates []*EmailTemplate
