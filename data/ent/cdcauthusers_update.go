// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/cdcauthusers"
	"github.com/ngdangkietswe/swe-notification-service/data/ent/predicate"
)

// CdcAuthUsersUpdate is the builder for updating CdcAuthUsers entities.
type CdcAuthUsersUpdate struct {
	config
	hooks    []Hook
	mutation *CdcAuthUsersMutation
}

// Where appends a list predicates to the CdcAuthUsersUpdate builder.
func (cauu *CdcAuthUsersUpdate) Where(ps ...predicate.CdcAuthUsers) *CdcAuthUsersUpdate {
	cauu.mutation.Where(ps...)
	return cauu
}

// SetUsername sets the "username" field.
func (cauu *CdcAuthUsersUpdate) SetUsername(s string) *CdcAuthUsersUpdate {
	cauu.mutation.SetUsername(s)
	return cauu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cauu *CdcAuthUsersUpdate) SetNillableUsername(s *string) *CdcAuthUsersUpdate {
	if s != nil {
		cauu.SetUsername(*s)
	}
	return cauu
}

// SetEmail sets the "email" field.
func (cauu *CdcAuthUsersUpdate) SetEmail(s string) *CdcAuthUsersUpdate {
	cauu.mutation.SetEmail(s)
	return cauu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cauu *CdcAuthUsersUpdate) SetNillableEmail(s *string) *CdcAuthUsersUpdate {
	if s != nil {
		cauu.SetEmail(*s)
	}
	return cauu
}

// Mutation returns the CdcAuthUsersMutation object of the builder.
func (cauu *CdcAuthUsersUpdate) Mutation() *CdcAuthUsersMutation {
	return cauu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cauu *CdcAuthUsersUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cauu.sqlSave, cauu.mutation, cauu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauu *CdcAuthUsersUpdate) SaveX(ctx context.Context) int {
	affected, err := cauu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cauu *CdcAuthUsersUpdate) Exec(ctx context.Context) error {
	_, err := cauu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauu *CdcAuthUsersUpdate) ExecX(ctx context.Context) {
	if err := cauu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauu *CdcAuthUsersUpdate) check() error {
	if v, ok := cauu.mutation.Username(); ok {
		if err := cdcauthusers.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "CdcAuthUsers.username": %w`, err)}
		}
	}
	if v, ok := cauu.mutation.Email(); ok {
		if err := cdcauthusers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "CdcAuthUsers.email": %w`, err)}
		}
	}
	return nil
}

func (cauu *CdcAuthUsersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cauu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cdcauthusers.Table, cdcauthusers.Columns, sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID))
	if ps := cauu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauu.mutation.Username(); ok {
		_spec.SetField(cdcauthusers.FieldUsername, field.TypeString, value)
	}
	if value, ok := cauu.mutation.Email(); ok {
		_spec.SetField(cdcauthusers.FieldEmail, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cauu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cdcauthusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cauu.mutation.done = true
	return n, nil
}

// CdcAuthUsersUpdateOne is the builder for updating a single CdcAuthUsers entity.
type CdcAuthUsersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CdcAuthUsersMutation
}

// SetUsername sets the "username" field.
func (cauuo *CdcAuthUsersUpdateOne) SetUsername(s string) *CdcAuthUsersUpdateOne {
	cauuo.mutation.SetUsername(s)
	return cauuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cauuo *CdcAuthUsersUpdateOne) SetNillableUsername(s *string) *CdcAuthUsersUpdateOne {
	if s != nil {
		cauuo.SetUsername(*s)
	}
	return cauuo
}

// SetEmail sets the "email" field.
func (cauuo *CdcAuthUsersUpdateOne) SetEmail(s string) *CdcAuthUsersUpdateOne {
	cauuo.mutation.SetEmail(s)
	return cauuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cauuo *CdcAuthUsersUpdateOne) SetNillableEmail(s *string) *CdcAuthUsersUpdateOne {
	if s != nil {
		cauuo.SetEmail(*s)
	}
	return cauuo
}

// Mutation returns the CdcAuthUsersMutation object of the builder.
func (cauuo *CdcAuthUsersUpdateOne) Mutation() *CdcAuthUsersMutation {
	return cauuo.mutation
}

// Where appends a list predicates to the CdcAuthUsersUpdate builder.
func (cauuo *CdcAuthUsersUpdateOne) Where(ps ...predicate.CdcAuthUsers) *CdcAuthUsersUpdateOne {
	cauuo.mutation.Where(ps...)
	return cauuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cauuo *CdcAuthUsersUpdateOne) Select(field string, fields ...string) *CdcAuthUsersUpdateOne {
	cauuo.fields = append([]string{field}, fields...)
	return cauuo
}

// Save executes the query and returns the updated CdcAuthUsers entity.
func (cauuo *CdcAuthUsersUpdateOne) Save(ctx context.Context) (*CdcAuthUsers, error) {
	return withHooks(ctx, cauuo.sqlSave, cauuo.mutation, cauuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cauuo *CdcAuthUsersUpdateOne) SaveX(ctx context.Context) *CdcAuthUsers {
	node, err := cauuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cauuo *CdcAuthUsersUpdateOne) Exec(ctx context.Context) error {
	_, err := cauuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cauuo *CdcAuthUsersUpdateOne) ExecX(ctx context.Context) {
	if err := cauuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cauuo *CdcAuthUsersUpdateOne) check() error {
	if v, ok := cauuo.mutation.Username(); ok {
		if err := cdcauthusers.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "CdcAuthUsers.username": %w`, err)}
		}
	}
	if v, ok := cauuo.mutation.Email(); ok {
		if err := cdcauthusers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "CdcAuthUsers.email": %w`, err)}
		}
	}
	return nil
}

func (cauuo *CdcAuthUsersUpdateOne) sqlSave(ctx context.Context) (_node *CdcAuthUsers, err error) {
	if err := cauuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cdcauthusers.Table, cdcauthusers.Columns, sqlgraph.NewFieldSpec(cdcauthusers.FieldID, field.TypeUUID))
	id, ok := cauuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CdcAuthUsers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cauuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cdcauthusers.FieldID)
		for _, f := range fields {
			if !cdcauthusers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cdcauthusers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cauuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cauuo.mutation.Username(); ok {
		_spec.SetField(cdcauthusers.FieldUsername, field.TypeString, value)
	}
	if value, ok := cauuo.mutation.Email(); ok {
		_spec.SetField(cdcauthusers.FieldEmail, field.TypeString, value)
	}
	_node = &CdcAuthUsers{config: cauuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cauuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cdcauthusers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cauuo.mutation.done = true
	return _node, nil
}
